name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: x
            artifact_name: x-linux-x86_64
            
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: x
            artifact_name: x-macos-x86_64
            
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: x
            artifact_name: x-macos-aarch64
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: x.exe
            artifact_name: x-windows-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/${{ matrix.artifact_name }}
        chmod +x artifacts/${{ matrix.artifact_name }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} artifacts\${{ matrix.artifact_name }}.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.artifact_name }}*
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Display structure of downloaded files
      run: ls -R release-artifacts/

    - name: Create release archives
      run: |
        cd release-artifacts
        for dir in */; do
          dirname=${dir%/}
          cd "$dirname"
          
          # Determine if this is Windows (has .exe)
          if ls *.exe 1> /dev/null 2>&1; then
            # Windows - create zip
            zip -r "../${dirname}.zip" *
          else
            # Unix - create tar.gz
            tar -czf "../${dirname}.tar.gz" *
          fi
          
          cd ..
        done

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          release-artifacts/*.zip
          release-artifacts/*.tar.gz
        body: |
          ## Release ${{ steps.version.outputs.VERSION }}
          
          ### Downloads
          
          - **Linux x86_64**: `x-linux-x86_64.tar.gz`
          - **macOS Intel**: `x-macos-x86_64.tar.gz`
          - **macOS Apple Silicon**: `x-macos-aarch64.tar.gz`
          - **Windows x86_64**: `x-windows-x86_64.zip`
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the binary to a directory in your PATH
          4. Make it executable (Unix systems): `chmod +x x`
          5. Configure your LLM provider: `x --config`
          
          ### What's Changed
          
          See the commit history for detailed changes in this release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-binaries:
    name: Test Binary ${{ matrix.target }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: x-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: x-macos-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: x-windows-x86_64

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: test-binary/

    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x test-binary/${{ matrix.artifact_name }}
        ./test-binary/${{ matrix.artifact_name }} --help

    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        test-binary\${{ matrix.artifact_name }}.exe --help
